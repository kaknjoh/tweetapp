{"version":3,"sources":["logo.svg","lookup/component.js","tweets/buttons.js","tweets/lookup.js","tweets/detail.js","tweets/list.js","tweets/create.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","responseType","open","setRequestHeader","onload","status","response","detail","window","location","href","onerror","e","message","send","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","handleActionBackendEvent","console","log","type","onClick","preventDefault","tweetID","id","apiTweetAction","ParentTweet","parent","Tweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","content","Fragment","event","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","newTweets","useEffect","final","concat","username","apiTweetList","alert","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","index","key","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendUpdate","onSubmit","current","value","newValue","ref","required","TweetsComponent","setNewTweets","canTweet","tempNewTweet","TweetDetailComponent","tweetId","didLookup","setDidLookup","setTweet","handleBackendLookup","App","src","logo","alt","target","rel","Boolean","hostname","appEl","getElementById","ReactDOM","render","createElement","tweetsEl","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.8078eb70.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function getCookie(name) {\n  var cookieValue = null;\n  if (document.cookie && document.cookie !== \"\") {\n    var cookies = document.cookie.split(\";\");\n    for (var i = 0; i < cookies.length; i++) {\n      var cookie = cookies[i].trim();\n      // Does this cookie string begin with the name we want?\n      if (cookie.substring(0, name.length + 1) === name + \"=\") {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n  return cookieValue;\n}\n\nexport function backendLookup(method, endpoint, callback, data) {\n  let jsonData;\n  if (data) {\n    jsonData = JSON.stringify(data);\n  }\n\n  const xhr = new XMLHttpRequest();\n\n  const url = `http://localhost:8000/api${endpoint}`;\n  const responseType = \"json\";\n  const csrftoken = getCookie(\"csrftoken\");\n  xhr.responseType = responseType;\n  xhr.open(method, url);\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n  if (csrftoken) {\n    //xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\");\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\n  }\n  xhr.onload = () => {\n    if (xhr.status === 403) {\n      const detail = xhr.response.detail;\n      if (detail === \"Authentication credentials were not provided.\") {\n        window.location.href = \"/login?showLoginRequired=true\";\n      }\n    }\n    callback(xhr.response, xhr.status);\n  };\n\n  xhr.onerror = (e) => {\n    callback({ message: \"Some request was an error \" }, 400);\n  };\n\n  xhr.send(jsonData);\n}\n","import React from \"react\";\nimport { apiTweetAction } from \"./lookup\";\n\nexport function ActionBtn(props) {\n  const { tweet, action, didPerformAction } = props;\n  const likes = tweet.likes ? tweet.likes : 0;\n  //const [userLike, setUserLike] = useState(\n  // tweet.userLike === true ? true : false\n  //);\n\n  const className = props.className ? props.className : \"btn btn-primary\";\n  const actionDisplay = action.display ? action.display : \"Action\";\n\n  const handleActionBackendEvent = (response, status) => {\n    console.log(response, status);\n    if ((status === 200 || status === 201) && didPerformAction) {\n      didPerformAction(response, status);\n    }\n  };\n  const display =\n    action.type === \"like\" ? `${likes} ${actionDisplay}` : actionDisplay;\n  const handleClick = (e) => {\n    e.preventDefault();\n    apiTweetAction(tweet.id, action.type, handleActionBackendEvent);\n  };\n  return (\n    <button onClick={handleClick} className={className}>\n      {display}\n    </button>\n  );\n}\n","import { backendLookup } from \"../lookup\";\n\nexport function apiTweetCreate(newTweet, callback) {\n  backendLookup(\"POST\", \"/tweets/create/\", callback, { content: newTweet });\n}\n\nexport function apiTweetAction(tweetID, action, callback) {\n  const data = {\n    id: tweetID,\n    action: action,\n  };\n  backendLookup(\"POST\", \"/tweets/action/\", callback, data);\n}\n\nexport function apiTweetDetail(tweetID, callback) {\n  backendLookup(\"GET\", `/tweets/${tweetID}`, callback);\n}\n\nexport function apiTweetList(username, callback) {\n  let endpoint = \"/tweets/\";\n  if (username) {\n    endpoint = `/tweets/?username=${username}`;\n  }\n  backendLookup(\"GET\", endpoint, callback);\n}\n","import React, { useState } from \"react\";\nimport { ActionBtn } from \"./buttons\";\n\nexport function ParentTweet(props) {\n  const { tweet } = props;\n  return tweet.parent ? (\n    <div className=\"row\">\n      <div className=\"col-11 mx-auto p-3 border rounded\">\n        <p className=\"mb-0 text-muted small\">Retweet</p>\n        <Tweet hideActions className={\" \"} tweet={tweet.parent} />\n      </div>\n    </div>\n  ) : null;\n}\nexport function Tweet(props) {\n  const { tweet, didRetweet, hideActions } = props;\n  const [actionTweet, setActionTweet] = useState(\n    props.tweet ? props.tweet : null\n  );\n  const path = window.location.pathname;\n  const match = path.match(/(?<tweetid>\\d+)/);\n  const urlTweetId = match ? match.groups.tweetid : -1;\n  const isDetail = `${tweet.id}` === `${urlTweetId}`;\n\n  const handlePerformAction = (newActionTweet, status) => {\n    if (status === 200) {\n      setActionTweet(newActionTweet);\n    } else if (status === 201) {\n      if (didRetweet) {\n        didRetweet(newActionTweet);\n      }\n    }\n  };\n  const className = props.className\n    ? props.className\n    : \"col-10 mx-auto col-md-6\";\n  const handleLink = (event) => {\n    event.preventDefault();\n    window.location.href = `/${tweet.id}`;\n  };\n  return (\n    <div className={className}>\n      <div>\n        <p>\n          {tweet.id}-{tweet.content}\n        </p>\n        <ParentTweet tweet={tweet} />\n      </div>\n      <div className=\"btn btn-group\">\n        {actionTweet && hideActions !== true && (\n          <React.Fragment>\n            <ActionBtn\n              tweet={actionTweet}\n              didPerformAction={handlePerformAction}\n              action={{ type: \"like\", display: \"Likes\" }}\n            />\n            <ActionBtn\n              tweet={actionTweet}\n              didPerformAction={handlePerformAction}\n              action={{ type: \"unlike\", display: \"Unlike\" }}\n            />\n            <ActionBtn\n              tweet={actionTweet}\n              didPerformAction={handlePerformAction}\n              action={{ type: \"retweet\", display: \"Retweet\" }}\n            />\n          </React.Fragment>\n        )}\n        {isDetail === true ? null : (\n          <button\n            className=\"btn btn-outline-primary btn-sm\"\n            onClick={handleLink}\n          >\n            View\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { apiTweetList } from \"./lookup\";\nimport { Tweet } from \"./detail\";\nexport function TweetsList(props) {\n  const [tweetsInit, setTweetsInit] = useState([]);\n  const [tweets, setTweets] = useState([]);\n  const [tweetsDidSet, setTweetsDidSet] = useState(false);\n  console.log(props.newTweets);\n\n  useEffect(() => {\n    const final = [...props.newTweets].concat(tweetsInit);\n    if (final.length !== tweets.length) {\n      setTweets(final);\n    }\n  }, [tweetsInit, tweets, props.newTweets]);\n  useEffect(() => {\n    if (tweetsDidSet === false) {\n      const handleTweetListLookup = (response, status) => {\n        if (status === 200) {\n          setTweetsInit(response);\n          setTweetsDidSet(true);\n        } else {\n          alert(\"There was an error\");\n        }\n      };\n      apiTweetList(props.username, handleTweetListLookup);\n    }\n  }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username]);\n\n  const handleDidRetweet = (newTweet) => {\n    const updateTweetsInit = [...tweetsInit];\n    updateTweetsInit.unshift(newTweet);\n    setTweetsInit(updateTweetsInit);\n    const updateFinalTweets = [...tweets];\n    updateFinalTweets.unshift(tweets);\n    setTweets(updateFinalTweets);\n  };\n  return tweets.map((tweet, index) => {\n    return (\n      <Tweet\n        tweet={tweet}\n        didRetweet={handleDidRetweet}\n        className=\"my-5 py-5 border bg-white text-dark\"\n        key={tweet.id}\n      />\n    );\n  });\n}\n","import React from \"react\";\nimport { apiTweetCreate } from \"./lookup\";\n\nexport function TweetCreate(props) {\n  const textAreaRef = React.createRef();\n  const { didTweet } = props;\n\n  const handleBackendUpdate = (response, status) => {\n    if (status === 201) {\n      didTweet(response);\n    } else {\n      console.log(response);\n      alert(\"An error occured please try again\");\n    }\n  };\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    console.log(event);\n    console.log(textAreaRef.current.value);\n    const newValue = textAreaRef.current.value;\n    // Backend api request\n    apiTweetCreate(newValue, handleBackendUpdate);\n\n    textAreaRef.current.value = \"\";\n  };\n  return (\n    <div className={props.className}>\n      <form onSubmit={handleSubmit}>\n        <textarea\n          ref={textAreaRef}\n          required={true}\n          className=\"form-control\"\n        ></textarea>\n        <button type=\"submit\" className=\"btn btn-primary my-3\">\n          Tweet\n        </button>\n      </form>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { TweetsList } from \"./list\";\nimport { TweetCreate } from \"./create\";\nimport { apiTweetDetail, apiTweetList } from \"./lookup\";\nimport { Tweet } from \"./detail\";\n\nexport function TweetsComponent(props) {\n  const [newTweets, setNewTweets] = useState([]);\n\n  const canTweet = props.canTweet === \"false\" ? false : true;\n  const handleNewTweet = (newTweet) => {\n    let tempNewTweet = [...newTweets];\n    tempNewTweet.unshift(newTweet);\n    setNewTweets(tempNewTweet);\n    // backend api response handler\n  };\n\n  return (\n    <div className={props.className}>\n      {canTweet === true && (\n        <TweetCreate didTweet={handleNewTweet} className=\"col-12 mb-3\" />\n      )}\n      {<TweetsList newTweets={newTweets} {...props} />}\n    </div>\n  );\n}\n\nexport function TweetDetailComponent(props) {\n  const { tweetId } = props;\n  const [didLookup, setDidLookup] = useState(false);\n  const [tweet, setTweet] = useState(null);\n  const handleBackendLookup = (response, status) => {\n    if (status === 200) {\n      setTweet(response);\n    } else {\n      alert(\"There was an error\");\n    }\n  };\n  useEffect(() => {\n    if (didLookup === false) {\n      apiTweetDetail(tweetId, handleBackendLookup);\n      setDidLookup(true);\n    }\n  }, [tweetId, didLookup, setDidLookup]);\n\n  return tweet === null ? null : (\n    <Tweet tweet={tweet} className={props.className} />\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { TweetsComponent } from \"./tweets\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code> src/App.js</code> and save to reload\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { TweetsComponent, TweetDetailComponent } from \"./tweets\";\n\nconst appEl = document.getElementById(\"root\");\nif (appEl) {\n  ReactDOM.render(<App />, appEl);\n}\nconst e = React.createElement;\nconst tweetsEl = document.getElementById(\"tweetapp\");\nif (tweetsEl) {\n  ReactDOM.render(e(TweetsComponent, tweetsEl.dataset), tweetsEl);\n}\n\nconst tweetDetailElements = document.querySelectorAll(\".tweetapp-detail\");\ntweetDetailElements.forEach((container) => {\n  ReactDOM.render(e(TweetDetailComponent, container.dataset), container);\n});\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}