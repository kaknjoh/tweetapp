{"version":3,"sources":["logo.svg","tweets/components.js","lookup/component.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TweetsComponent","props","useState","newTweets","setNewTweets","textAreaRef","React","createRef","className","onSubmit","event","preventDefault","console","log","current","value","newValue","tempNewTweet","unshift","content","likes","id","ref","required","type","TweetsList","ActionBtn","tweet","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","e","Tweet","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","send","loadTweets","alert","map","index","key","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8e7746d0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState } from \"react\";\nimport { loadTweets } from \"../lookup\";\n\nexport function TweetsComponent(props) {\n  const [newTweets, setNewTweets] = useState([]);\n  const textAreaRef = React.createRef();\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    console.log(event);\n    console.log(textAreaRef.current.value);\n    const newValue = textAreaRef.current.value;\n    let tempNewTweet = [...newTweets];\n    tempNewTweet.unshift({\n      content: newValue,\n      likes: 0,\n      id: 122,\n    });\n    setNewTweets(tempNewTweet);\n    console.log(newValue);\n    textAreaRef.current.value = \"\";\n  };\n  return (\n    <div className={props.className}>\n      <div className=\"col-12 mb-3\">\n        <form onSubmit={handleSubmit}>\n          <textarea\n            ref={textAreaRef}\n            required={true}\n            className=\"form-control\"\n          ></textarea>\n          <button type=\"submit\" className=\"btn btn-primary my-3\">\n            Tweet\n          </button>\n        </form>\n      </div>\n      {<TweetsList newTweets={newTweets} />}\n    </div>\n  );\n}\nexport function ActionBtn(props) {\n  const { tweet, action } = props;\n  const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0);\n  const [userLike, setUserLike] = useState(\n    tweet.userLike === true ? true : false\n  );\n  const className = props.className ? props.className : \"btn btn-primary\";\n  const actionDisplay = action.display ? action.display : \"Action\";\n\n  const display =\n    action.type === \"like\" ? `${likes} ${actionDisplay}` : actionDisplay;\n  const handleClick = (e) => {\n    e.preventDefault();\n    if (action.type === \"like\") {\n      if (userLike === true) {\n        setLikes(likes - 1);\n        setUserLike(false);\n      } else {\n        setLikes(likes + 1);\n        setUserLike(true);\n      }\n    }\n  };\n  return (\n    <button onClick={handleClick} className={className}>\n      {display}\n    </button>\n  );\n}\n\nexport function Tweet(props) {\n  const { tweet } = props;\n  const className = props.className\n    ? props.className\n    : \"col-10 mx-auto col-md-6\";\n\n  return (\n    <div className={className}>\n      <p>\n        {tweet.id}-{tweet.content}\n      </p>\n      <div className=\"btn btn-group\">\n        <ActionBtn tweet={tweet} action={{ type: \"like\", display: \"Likes\" }} />\n        <ActionBtn\n          tweet={tweet}\n          action={{ type: \"unlike\", display: \"Unlike\" }}\n        />\n        <ActionBtn\n          tweet={tweet}\n          action={{ type: \"retweet\", display: \"Retweet\" }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function TweetsList(props) {\n  const [tweetsInit, setTweetsInit] = useState([]);\n  const [tweets, setTweets] = useState([]);\n  console.log(props.newTweets);\n\n  useEffect(() => {\n    const final = [...props.newTweets].concat(tweetsInit);\n    if (final.length !== tweets.length) {\n      setTweets(final);\n    }\n  }, [tweetsInit, tweets, props.newTweets]);\n  useEffect(() => {\n    const myCallBack = (response, status) => {\n      if (status === 200) {\n        setTweetsInit(response);\n      } else {\n        alert(\"There was an error\");\n      }\n    };\n    console.log(\"Doslo\");\n    loadTweets(myCallBack);\n  }, []);\n  return tweets.map((tweet, index) => {\n    return (\n      <Tweet\n        tweet={tweet}\n        className=\"my-5 py-5 border bg-white text-dark\"\n        key={tweet.id}\n      />\n    );\n  });\n}\n","export const loadTweets = (callback) => {\n  const xhr = new XMLHttpRequest();\n  const method = \"GET\";\n  const url = \"http://localhost:8000/api/tweets/\";\n  const responseType = \"json\";\n  xhr.responseType = responseType;\n  xhr.open(method, url);\n  xhr.onload = () => {\n    console.log(xhr.response, xhr.status);\n    callback(xhr.response, xhr.status);\n  };\n\n  xhr.send();\n};\n","import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { TweetsComponent } from \"./tweets\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code> src/App.js</code> and save to reload\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}